"use strict";(self.webpackChunkngx_form_object=self.webpackChunkngx_form_object||[]).push([[174],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(r),u=o,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||a;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5826:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={id:"validating-forms",title:"Validating forms",sidebar_label:"Validating forms"},i=void 0,l={unversionedId:"guides/validating-forms",id:"guides/validating-forms",title:"Validating forms",description:"Defining relationship validators",source:"@site/docs/guides/validating-forms.md",sourceDirName:"guides",slug:"/guides/validating-forms",permalink:"/ngx-form-object/docs/next/guides/validating-forms",draft:!1,tags:[],version:"current",frontMatter:{id:"validating-forms",title:"Validating forms",sidebar_label:"Validating forms"},sidebar:"mainSidebar",previous:{title:"Saving forms",permalink:"/ngx-form-object/docs/next/guides/saving-forms"},next:{title:"Migration guide",permalink:"/ngx-form-object/docs/next/migration-guide"}},s={},p=[{value:"Defining relationship validators",id:"defining-relationship-validators",level:2},{value:"Defining FormObject validator with <code>FormGroupOptions</code>",id:"defining-formobject-validator-with-formgroupoptions",level:2}],d={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"defining-relationship-validators"},"Defining relationship validators"),(0,o.kt)("p",null,"Relationship validators can be added by defining a ",(0,o.kt)("inlineCode",{parentName:"p"},"validators")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.form-object.ts"',title:'"user.form-object.ts"'},"import { Validators } from '@angular/forms';\n...\n\nvalidators: {\n  name: Validators.required, // User must have a name\n  cars: (carsControl: AbstractControl) => {\n    return carsControl.value?.length >= 1 : null : { error: 'User must have at least 2 cars' };\n  },\n}\n...\n")),(0,o.kt)("p",null,"These validators will be passed to the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cars")," form controls."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Validator object will be used only for ",(0,o.kt)("inlineCode",{parentName:"p"},"Attribute")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMany")," relationships. For validating ",(0,o.kt)("inlineCode",{parentName:"p"},"BelongsTo")," relationships, see ",(0,o.kt)("a",{parentName:"p",href:"#defining-formobject-validator-with-formgroupoptions"},"FormGroupOptions"),".")),(0,o.kt)("h2",{id:"defining-formobject-validator-with-formgroupoptions"},"Defining FormObject validator with ",(0,o.kt)("inlineCode",{parentName:"h2"},"FormGroupOptions")),(0,o.kt)("p",null,"To validate a ",(0,o.kt)("inlineCode",{parentName:"p"},"FormStore")," instance as a whole, a validator can be provided via ",(0,o.kt)("inlineCode",{parentName:"p"},"formGroupOptions")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"FormObject"),"."),(0,o.kt)("p",null,"This can be used for validating the ",(0,o.kt)("inlineCode",{parentName:"p"},"BelongsTo")," relationships."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.form-object.ts"',title:'"user.form-object.ts"'},"import { Validators } from '@angular/forms';\n...\npublic formGroupOptions: FormGroupOptions = {\n  validator: (form: FormStore) => {\n    ...\n  },\n};\n...\n")))}m.isMDXComponent=!0}}]);