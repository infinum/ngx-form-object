"use strict";(self.webpackChunkngx_form_object=self.webpackChunkngx_form_object||[]).push([[593],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return c}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(r),c=o,f=u["".concat(l,".").concat(c)]||u[c]||d[c]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function c(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var m=2;m<a;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6288:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m},default:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={id:"saving-forms",title:"Saving forms",sidebar_label:"Saving forms"},l={unversionedId:"guides/saving-forms",id:"version-9.0.0/guides/saving-forms",isDocsHomePage:!1,title:"Saving forms",description:"Saving process is initiated by calling save method on a FormStore - userFormStore.save().",source:"@site/versioned_docs/version-9.0.0/guides/saving-forms.md",sourceDirName:"guides",slug:"/guides/saving-forms",permalink:"/ngx-form-object/docs/guides/saving-forms",version:"9.0.0",sidebar_label:"Saving forms",frontMatter:{id:"saving-forms",title:"Saving forms",sidebar_label:"Saving forms"},sidebar:"version-9.0.0/mainSidebar",previous:{title:"Defining relationship form fields",permalink:"/ngx-form-object/docs/guides/defining-relationship-form-fields"},next:{title:"Validating forms",permalink:"/ngx-form-object/docs/guides/validating-forms"}},m=[{value:"beforeSave()",id:"beforesave",children:[]},{value:"save()",id:"save",children:[]},{value:"afterSave()",id:"aftersave",children:[]}],p={toc:m};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Saving process is initiated by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method on a ",(0,a.kt)("inlineCode",{parentName:"p"},"FormStore")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"userFormStore.save()"),"."),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method on a ",(0,a.kt)("inlineCode",{parentName:"p"},"FormStore")," is invoked three ",(0,a.kt)("inlineCode",{parentName:"p"},"FormObject")," hooks will be executed one after another in the following order: ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSave"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"save"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterSave"),"."),(0,a.kt)("p",null,"This three hooks that can be utilized to add additional functionalities to a saving process. Of this three methods only ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method is ",(0,a.kt)("b",null,"required for saving")," the form."),(0,a.kt)("h3",{id:"beforesave"},"beforeSave()"),(0,a.kt)("p",null,"Implement this method to execute any action before the actual saving is done. ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSave")," method gets a ",(0,a.kt)("inlineCode",{parentName:"p"},"FormStore")," instance as an argument and it should return an observable of the same ",(0,a.kt)("inlineCode",{parentName:"p"},"FormStore"),"."),(0,a.kt)("p",null,"An example how this hook could  be used is to save model relationships before the original model is saved.\nFor example, if ",(0,a.kt)("inlineCode",{parentName:"p"},"userForm.value.address")," is set to a new address that does not yet exist in the database, then it might be useful to save it before saving the ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," model. ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSave")," hook could be used to achieve that."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.form-object.ts"',title:'"user.form-object.ts"'},"beforeSave(userForm: UserFormStore): Observable<UserFormStore> {\n  return userForm.get('address').save().pipe(\n    map(() => userForm)\n  );\n}\n")),(0,a.kt)("h3",{id:"save"},"save()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ngx-form-object")," handles saving and persisting of the form values. To persist model values implement ",(0,a.kt)("inlineCode",{parentName:"p"},"save")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.form-object.ts"',title:'"user.form-object.ts"'},"public save(model: User): Observable<User> {\n  // Persist your model here\n}\n")),(0,a.kt)("h3",{id:"aftersave"},"afterSave()"),(0,a.kt)("p",null,"Similarly to ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeSave"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"afterSave")," hook can be used to execute any action after the actual saving returned a response."),(0,a.kt)("p",null,"This method gets a ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"FormStore")," instance as an argument and it should return an observable of the ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),"."),(0,a.kt)("p",null,"An example how this hook could be used is to save model relationships after the original model is saved."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.form-object.ts"',title:'"user.form-object.ts"'},"afterSave(user: User, userForm: UserFormStore): Observable<User> {\n  return userForm.get('address').save().pipe(\n    map(() => user)\n  );\n}\n")))}d.isMDXComponent=!0}}]);