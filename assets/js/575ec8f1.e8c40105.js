"use strict";(self.webpackChunkngx_form_object=self.webpackChunkngx_form_object||[]).push([[682],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),f=s(r),c=i,u=f["".concat(d,".").concat(c)]||f[c]||p[c]||o;return r?n.createElement(u,a(a({ref:t},m),{},{components:r})):n.createElement(u,a({ref:t},m))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[f]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7491:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const o={id:"defining-relationship-form-fields",title:"Defining relationship form fields",sidebar_label:"Defining relationship form fields"},a=void 0,l={unversionedId:"guides/defining-relationship-form-fields",id:"guides/defining-relationship-form-fields",title:"Defining relationship form fields",description:"When creating a form, there is a default behaviour for every type of form field relationship:",source:"@site/docs/guides/defining-relationship-form-fields.md",sourceDirName:"guides",slug:"/guides/defining-relationship-form-fields",permalink:"/ngx-form-object/docs/next/guides/defining-relationship-form-fields",draft:!1,tags:[],version:"current",frontMatter:{id:"defining-relationship-form-fields",title:"Defining relationship form fields",sidebar_label:"Defining relationship form fields"},sidebar:"mainSidebar",previous:{title:"Creating complex forms",permalink:"/ngx-form-object/docs/next/guides/creating-complex-forms"},next:{title:"Saving forms",permalink:"/ngx-form-object/docs/next/guides/saving-forms"}},d={},s=[{value:"Create relationship form fields using @BuildRelationshipFormObject decorator",id:"create-relationship-form-fields-using-buildrelationshipformobject-decorator",level:3},{value:"Create form fields using BuildControl decorator",id:"create-form-fields-using-buildcontrol-decorator",level:3}],m={toc:s};function f(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When creating a form, there is a default behaviour for every type of form field relationship:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Attribute")," form field - ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," will be created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BelongsTo")," form field - ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," will be created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HasMany")," form field - An empty ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormArray")," will be created")),(0,i.kt)("p",null,"For example, for ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.model.ts"',title:'"user.model.ts"'},"import { Attribute, HasMany } from 'ngx-form-object';\n\nclass User {\n  @Attribute()\n  name: string;\n\n  @BelongsTo()\n  address: Address;\n\n  @HasMany()\n  cars: Array<Car>;\n}\n")),(0,i.kt)("p",null,"By default form will be created with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cars")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormArray")," containing one ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," for every ",(0,i.kt)("inlineCode",{parentName:"li"},"Car")," model.")),(0,i.kt)("p",null,"If default form fields don't provide enough control (e.g. you are manipulating multiple levels of relationships on the same page/form), default behaviour can be overriden by implementing one of the following methods:"),(0,i.kt)("h3",{id:"create-relationship-form-fields-using-buildrelationshipformobject-decorator"},"Create relationship form fields using @BuildRelationshipFormObject decorator"),(0,i.kt)("p",null,"If defined, method decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@BuildRelationshipFormObject")," decorator will be used when creating a form field for any model relationship decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@BelongsTo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@HasMany")," decorators.\nThis method must return a ",(0,i.kt)("inlineCode",{parentName:"p"},"FormObject")," instance. ",(0,i.kt)("a",{parentName:"p",href:"/ngx-form-object/docs/next/guides/creating-complex-forms#creating-complex-relationship-structures"},"Find out more"),"."),(0,i.kt)("h3",{id:"create-form-fields-using-buildcontrol-decorator"},"Create form fields using BuildControl decorator"),(0,i.kt)("p",null,"If defined, method decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildControl")," decorator will be used when building a form field for any model property or relationship decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"Attribute"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BelongsTo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"HasMany"),".\nThis method must return an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ExtendedFormControl"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ExtendedFormArray")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FormStore"),". It receives property value as its argument. ",(0,i.kt)("a",{parentName:"p",href:"/ngx-form-object/docs/next/guides/creating-complex-forms#creating-custom-relationship-forms"},"Find out more"),"."))}f.isMDXComponent=!0}}]);