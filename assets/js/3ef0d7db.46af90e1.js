"use strict";(self.webpackChunkngx_form_object=self.webpackChunkngx_form_object||[]).push([[679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),m=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(d.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=m(n),c=i,u=f["".concat(d,".").concat(c)]||f[c]||p[c]||o;return n?r.createElement(u,a(a({ref:t},s),{},{components:n})):r.createElement(u,a({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[f]="string"==typeof e?e:i,a[1]=l;for(var m=2;m<o;m++)a[m]=n[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(7462),i=(n(7294),n(3905));const o={id:"defining-relationship-form-fields",title:"Defining relationship form fields",sidebar_label:"Defining relationship form fields"},a=void 0,l={unversionedId:"guides/defining-relationship-form-fields",id:"version-9.0.0/guides/defining-relationship-form-fields",title:"Defining relationship form fields",description:"FormObjectBuilder has a default behaviour for every type of form field relationship:",source:"@site/versioned_docs/version-9.0.0/guides/defining-relationship-form-fields.md",sourceDirName:"guides",slug:"/guides/defining-relationship-form-fields",permalink:"/ngx-form-object/docs/guides/defining-relationship-form-fields",draft:!1,tags:[],version:"9.0.0",frontMatter:{id:"defining-relationship-form-fields",title:"Defining relationship form fields",sidebar_label:"Defining relationship form fields"},sidebar:"version-9.0.0/mainSidebar",previous:{title:"Creating complex forms",permalink:"/ngx-form-object/docs/guides/creating-complex-forms"},next:{title:"Saving forms",permalink:"/ngx-form-object/docs/guides/saving-forms"}},d={},m=[{value:"Create relationship form fields using create{FieldName}FormObject method",id:"create-relationship-form-fields-using-createfieldnameformobject-method",level:3},{value:"Create form fields using build{FieldName} method",id:"create-form-fields-using-buildfieldname-method",level:3}],s={toc:m};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"FormObjectBuilder")," has a default behaviour for every type of form field relationship:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Attribute")," form field - ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," will be created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BelongsTo")," form field - ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," will be created"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HasMany")," form field - An empty ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormArray")," will be created")),(0,i.kt)("p",null,"For example, for ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="user.model.ts"',title:'"user.model.ts"'},"import { Attribute, HasMany } from 'ngx-form-object';\n\nclass User {\n  @Attribute()\n  name: string;\n\n  @BelongsTo()\n  address: Address;\n\n  @HasMany()\n  cars: Array<Car>;\n}\n")),(0,i.kt)("p",null,"By default form will be created with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cars")," form field as ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormArray")," containing one ",(0,i.kt)("inlineCode",{parentName:"li"},"ExtendedFormControl")," for every ",(0,i.kt)("inlineCode",{parentName:"li"},"Car")," model.")),(0,i.kt)("p",null,"If default form fields don't provide enough control (e.g. you are manipulating multiple levels of relationships on the same page/form), default behaviour can be overriden by implementing one of the following methods:"),(0,i.kt)("h3",{id:"create-relationship-form-fields-using-createfieldnameformobject-method"},"Create relationship form fields using create{FieldName}FormObject method"),(0,i.kt)("p",null,"If defined, this method will be used when creating a form field for any model relationship decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"BelongsTo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"HasMany"),".\nThis method must have a name formatted like ",(0,i.kt)("inlineCode",{parentName:"p"},"create{propertyName}FormObject")," and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"FormObject")," instance. ",(0,i.kt)("a",{parentName:"p",href:"/ngx-form-object/docs/guides/creating-complex-forms#creating-complex-relationship-structures"},"Find out more"),"."),(0,i.kt)("h3",{id:"create-form-fields-using-buildfieldname-method"},"Create form fields using build{FieldName} method"),(0,i.kt)("p",null,"If defined, this method will be used when building a form field for any model property or relationship decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"Attribute"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BelongsTo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"HasMany"),".\nThis method must have a name formatted like ",(0,i.kt)("inlineCode",{parentName:"p"},"build{propertyName}")," and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"ExtendedFormControl"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ExtendedFormArray")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FormStore")," instance. It receives property value as its argument. ",(0,i.kt)("a",{parentName:"p",href:"/ngx-form-object/docs/guides/creating-complex-forms#creating-custom-relationship-forms"},"Find out more"),"."))}f.isMDXComponent=!0}}]);